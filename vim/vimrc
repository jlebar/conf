" perdirvimrc likes to execute my vimrc twice, which breaks things.
if exists("jlebar_vimrc_loaded")
  finish
endif
let jlebar_vimrc_loaded = 1

filetype plugin indent on

syntax on
set nocompatible
set t_Co=256
set bg=light

set hlsearch
set incsearch
set tabstop=8
set autoindent
set background=light
set formatoptions=1
set lbr
set autowrite
set ttyfast  " turn off if connection is slow
if version >= 730
  set relativenumber
  set undofile
endif

set spelllang=en_us
set spellfile=~/.vim/spellfile.add

" Navigate by visual lines, not file lines.
nnoremap <buffer> k gk
nnoremap <buffer> j gj
nnoremap <buffer> <Up> gk
nnoremap <buffer> <Down> gj
"nnoremap <buffer> 0 g0
"nnoremap <buffer> ^ g^
"nnoremap <buffer> $ g$
inoremap <buffer> <Up> <C-O>gk
inoremap <buffer> <Down> <C-O>gj
vnoremap <buffer> k gk
vnoremap <buffer> j gj
vnoremap <buffer> <Up> gk
vnoremap <buffer> <Down> gj
"vnoremap <buffer> 0 g0
"vnoremap <buffer> ^ g^
"vnoremap <buffer> $ g$

" Break lines at word boundaries
set wrap
set linebreak
setlocal encoding=utf-8

set hlsearch  " highlight searches
set incsearch " incremental search
set gdefault  " append /g to find/replace by default
" \<space> to clear search highlighting
noremap <leader><space> :nohl<cr>

" Very magic searches by default.
"nnoremap / /\v
"vnoremap / /\v

"filetype plugin on
"filetype indent on
"filetype on " taglist plugin needs filetype detection

" Auto-format comments with gq
set formatoptions=q

" \s does a syntax resync
noremap <leader>s :syn sync fromstart<CR>

" \8 resizes the window to 80 characters wide
noremap <leader>8 :vertical resize 80<CR>

" \f does gwap to reformat the current paragraph
" noremap <leader>f gwap

" wildmenu for file open tab completion.  Press ^D to see contents of current
" dir.
set wildmenu
set wildignore=*.o,*.obj,*.bak,*.exe,*.class,*.pyc,*.pyo

"set verbose=9

" Define spacehi in a group so it can be disabled.
augroup vimrc_autocmd
  autocmd!
  autocmd FileType * SpaceHi
  autocmd FileType help,go NoSpaceHi

  autocmd FileType * setlocal expandtab|setlocal shiftwidth=2|setlocal softtabstop=2
  autocmd FileType make setlocal noexpandtab|setlocal softtabstop=0
  "autocmd FileType python setlocal softtabstop=4|setlocal shiftwidth=4
  autocmd BufRead *.jsm set filetype=javascript
  autocmd BufNewFile,BufRead *.md setfiletype markdown
  autocmd BufNewFile,BufRead *.md setlocal textwidth=80
augroup END

autocmd FileType go setlocal tabstop=2|setlocal showbreak=…
set rtp+=$GOPATH/src/github.com/golang/lint/misc/vim


" Case-insensitive searches, *unless* our our query contains an upper-case
" character.
set ignorecase
set smartcase

" Visual shifting without exiting visual mode!
vnoremap < <gv
vnoremap > >gv

" taglist settings
let Tlist_Compact_Format = 1
let Tlist_File_Fold_Auto_Close = 1
noremap <leader>h :TlistHighlightTag<cr>
"let Tlist_Auto_Highlight_Tag = 0

if has("gui_running")
endif

" set display+=lastline " not sure what this does

"set backupdir=$TEMP\\vim\\
"set directory=$TEMP\\vim\\
"silent execute '!rm -f '.$TEMP.'/vim/*~'
set nobackup
set nowritebackup

"enable mouse
set mouse=a
set modeline

set statusline=%f\ %y\ %([%R%M]%)\ %=#%n\ %l/%L,%c%V
set laststatus=2

" Don't display errors that require me to press <enter>.  Hopefully.
" See ycm-users thread entitled
"
"   Is there anyway to make the "ValueError" line NOT display
"   when I open a new file?
set cmdheight=2
set shortmess=a

function! CodeSearch()
  execute ":silent !csweb " . expand('%') . " " . line(".")
  redraw!
endfunction
command! CS :call CodeSearch()

noremap <leader>f :ClangFormat<CR>

" Sort current paragraph.
noremap <leader>i vip :sort u<CR>

" <leader>z scrolls so the current line is 10 lines away from the top of the
" buffer.
noremap <leader>z z<CR>10<C-Y>

" disable Ex mode (http://www.bestofvim.com/tip/leave-ex-mode-good/)
nnoremap Q <nop>

" Show linebreaks
set showbreak=↪

" Spell checking for git, svn commits.
autocmd FileType gitcommit setlocal spell
autocmd FileType svn       setlocal spell

execute pathogen#infect()

" Don't highlight C++11 initializer lists in red.
let c_no_curly_error=1
let g:ycm_enable_diagnostic_signs=0
let g:ycm_always_populate_location_list=1
let g:ycm_extra_conf_globlist = ['~/code/llvm/src/.ycm_extra_conf.py']

"" Google-specific stuff
source /usr/share/vim/google/google.vim
Glug youcompleteme-google
Glug grok
Glug whitespace !highlight
Glug codefmt gofmt_executable="goimports"
Glug codefmt-google

Glug blazedeps auto_filetypes=`['go']`

autocmd FileType go AutoFormatBuffer gofmt
autocmd FileType bzl,blazebuild AutoFormatBuffer buildifier

" Disable YCM's autocomplete buffer thingy at the top of the screen.
set completeopt-=preview

" Custom matcher ranking for ctrlp.
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_max_files = 500000

" Bindings for YCM awesomeness.  We use 't' rather than the perhaps more natural
" 'y' because fingers.
noremap <leader>tr :YcmRestartServer
noremap <leader>tc :YcmForceCompileAndDiagnostics<cr>
noremap <leader>td :YcmDiags<cr>
noremap <leader>tg :YcmCompleter GoTo<cr>
noremap <leader>tt :YcmCompleter GetType<cr>
noremap <leader>tp :YcmCompleter GetParent<cr>

noremap <leader>c  :YcmForceCompileAndDiagnostics<cr>
