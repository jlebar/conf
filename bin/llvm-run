#!/bin/bash

# Builds and runs an llvm binary (clang, opt, llc, llvm-dis, etc.).  Runs a
# release binary by default, but alternatively lets you run a debug binary, or
# run a debug binary under gdb or rr.
#
# Usage: llvm-run [--debug|--gdb|--rr] clang    [args]
# Usage: llvm-run [--debug|--gdb|--rr] llvm-dis [args]
# Usage: etc.

debug=0
debugger=""
if [[ "$1" == "--debug" ]]; then
  shift
  debug=1
elif [[ "$1" == "--gdb" ]]; then
  shift
  debug=1
  debugger="gdb"
elif [[ "$1" == "--rr" ]]; then
  shift
  debug=1
  debugger="rr"
fi

if [[ "$debug" == 0 ]]; then
  build_dir="$HOME/code/llvm/release"
else
  build_dir="$HOME/code/llvm/debug"
fi
bin="$1"
build_target="$bin"

if [[ "$build_target" == "clang++" ]]; then
  build_target="clang"
fi

shift
set -e
ninja -C "$build_dir" "$build_target" 1>&2

to_run="$build_dir/bin/$bin"
if [[ "$debugger" == "" ]]; then
  exec "$to_run" $@
elif [[ "$debugger" == "gdb" ]]; then
  exec gdb -ex "source $HOME/llvm/src/utils/gdb-scripts/prettyprinters.py" --args "$to_run" $@
elif [[ "$debugger" == "rr" ]]; then
  source_tmp="$(mktemp)"
  echo "source $HOME/llvm/src/utils/gdb-scripts/prettyprinters.py" > "$source_tmp"

  set +e
  rr record "$to_run" $@
  rr replay -x "$source_tmp"
  set -e
  rm "$source_tmp"
fi
