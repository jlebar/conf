# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export CONFDIR=$HOME/code/conf
export ZSH="$CONFDIR/ohmyzsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME=""  # using pure, below

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git history-substring-search)

source $ZSH/oh-my-zsh.sh

# User configuration

fpath+=$CONFDIR/pure
autoload -U promptinit; promptinit
prompt pure

source "$CONFDIR/zlong_alert.zsh/zlong_alert.zsh"

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export CONFDIR="$HOME/code/conf"

path+=($HOME/bin)
path+=($CONFDIR/bin)
export PATH

# Add GNU utilities to path.  I know you're not supposed to do this,
# but...yeah.  I have the `nognu` script that lets me run code without this.
# From https://apple.stackexchange.com/questions/103228/homebrew-easy-way-to-add-gnubin-to-path-for-multiple-packages
if type brew &>/dev/null; then
  HOMEBREW_PREFIX=$(brew --prefix)
  # gnubin; gnuman
  for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnubin; do export PATH=$d:$PATH; done
  # I actually like that man grep gives the BSD grep man page
  for d in ${HOMEBREW_PREFIX}/opt/*/libexec/gnuman; do export MANPATH=$d:$MANPATH; done
fi

alias ls='ls --color=auto'
alias hg='chg'
export EDITOR="vim"
export SAVEHIST=1000000
export TERM=xterm-256color
export XDG_DATA_HOME="$HOME/.local/share"

###### vi-mode ######
# The "pure" prompt says not to enable oh-my-zsh vi-mode plugin for whatever reason.

bindkey -v

# allow v to edit the command line (standard behaviour)
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'v' edit-command-line

# allow ctrl-p, ctrl-n for navigate history (standard behaviour)
bindkey '^P' up-history
bindkey '^N' down-history

# allow ctrl-h, ctrl-w, ctrl-? for char and word deletion (standard behaviour)
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word

# allow ctrl-r and ctrl-s to search the history
bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward

###### vi-mode ######

# So pyenv and conda don't play nice together??
# eval "$(pyenv init -)"

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/usr/local/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
#         . "/usr/local/Caskroom/miniconda/base/etc/profile.d/conda.sh"
#     else
#         export PATH="/usr/local/Caskroom/miniconda/base/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<

# https://stackoverflow.com/a/42265848/61394
export GPG_TTY=$(tty)

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

if [ -f "$HOME/.zshrc.local" ]; then
  source "$HOME/.zshrc.local"
fi

# ohmyzsh makes a *global* alias of ... to ../..
# This breaks e.g. bazel build ...
# Re-alias it as a *command* alias.
unalias '...'
alias ...='cd ../..'

setopt share_history

#export MCFLY_LIGHT=TRUE
#eval "$(mcfly init zsh)"

export WINDOWS_COMMON_FILE=learning/brain/testing/kokoro/common_win_google.bat
export MACOS_COMMON_FILE=learning/brain/testing/kokoro/common_google.sh

function get_client_command {
    hg status >/dev/null 2>&1
    if [[ "$?" -eq 0 ]]; then
        echo "Detected fig client."
        CLIENT_COMMAND="hg"
    else
        echo "Detected p4 client."
        CLIENT_COMMAND="g4"
    fi
}


function enable_tf_windows_presubmits {
    get_client_command
    if [[ "${CLIENT_COMMAND}" == "hg" ]]; then
        echo "@REM TODO(jlebar): DO NOT SUBMIT Please revert this change prior to submission." >> "${WINDOWS_COMMON_FILE}"
        hg amend
        hg uploadchain
    else
        echo "@REM TODO(jlebar): DO NOT SUBMIT Please revert this change prior to submission." >> "${WINDOWS_COMMON_FILE}"
        g4 reopen
    fi
}

function disable_tf_windows_presubmits {
    get_client_command
    if [[ "${CLIENT_COMMAND}" == "hg" ]]; then
        hg revert -r p4head learning/brain/testing/kokoro/common_win_google.bat
        hg amend
        hg uploadchain
    else
        g4 revert learning/brain/testing/kokoro/common_win_google.bat
    fi
}

function enable_tf_macos_presubmits {
    get_client_command
    if [[ "${CLIENT_COMMAND}" == "hg" ]]; then
        echo "# TODO(jlebar): DO NOT SUBMIT Please revert this change prior to submission." >> "${MACOS_COMMON_FILE}"
        hg amend
        hg uploadchain
    else
        echo "# TODO(jlebar): DO NOT SUBMIT Please revert this change prior to submission." >> "${MACOS_COMMON_FILE}"
        g4 reopen
    fi
}

function disable_tf_macos_presubmits {
    get_client_command
    if [[ "${CLIENT_COMMAND}" == "hg" ]]; then
        hg revert -r p4head learning/brain/testing/kokoro/common_google.sh
        hg amend
        hg uploadchain
    else
        g4 revert learning/brain/testing/kokoro/common_google.sh
    fi
}

